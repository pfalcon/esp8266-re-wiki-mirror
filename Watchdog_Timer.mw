'''NOTE: The following is apparently at least partially wrong (the ESP8266 ''does'' seem to have a hardware WDT, but the SDK doesn't use it).  This needs more investigation -- [[User:Foogod|Foogod]] ([[User talk:Foogod|talk]]) 15:19, 16 July 2015 (EDT)'''

The ESP8266 apparently does not have a hardware watchdog timer, however one is implemented in software by the SDK:

(The following is based primarily on the [[IoT RTOS SDK 0.9.9]], but is believed to be similar for other versions of the SDK)

The wDev/MAC hardware in the ESP8266 apparently has two built in timers (MacTim and MacTim1) which can be configured to trigger an NMI after a certain number of internal clock cycles have elapsed.  The second timer (MacTim1) is used exclusively for watchdog functionality and is set up during system startup to trigger an NMI after 1600000 ticks (it is assumed that these ticks are equivalent to processor clocks, but this has not yet been tested):

To set MacTim1:
# Read the current 64 bit clock value from [0x3ff2104c] (high 32 bits) and [0x3ff21048] (low 32 bits)
# Add the desired offset to the clock value
# Write the result back to [0x3ff210d0] (high 32 bits) and [0x3ff210cc] (low 32 bits)
# Set bit 31 of [0x3ff210c8]

(Note that one needs to be careful that the low bits do not roll over between reading the top bits and the bottom bits of the counter)

The NMI service routine checks bit 26 of [0x3ff20c20] to determine whether MacTim1 was the cause of the NMI, and if so, calls a watchdog check function.  This check function checks an internal boolean variable to determine whether the watchdog has been fed since the last time, and if not, calls the system reset routine.

(to feed the dog, it is simply necessary to change the value of the internal variable to false at some point between calls to the NMI routine)

If all is well, the watchdog check function sets the check variable to true, sets up MacTim1 to fire after another 1600000 ticks, and returns.
