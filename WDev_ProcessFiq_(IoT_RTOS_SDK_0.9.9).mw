=wDev_ProcessFiq=

wDev_ProcessFiq is defined in wdev.o inside libpp.a. It is the interrupt handler for the NMI (see also [[Watchdog Timer]]).

(FIQ = fast interrupt request, for the highest priority interrupt in the system.)

==NMI Exception Vector==

Incoming call trace goes something like

* _NMIExceptionVector jumps to unnamed routine 0x001010c in xtensa_vectors.o
* Routine saves register state ,calls wDev_ProcessFiq
* After execution, restore register state, etc.

==Behaviour==

* Waits for bit 0 in 0x3ff00000 to clear. (Behaviour seems odd - it writes to that address clearing all bits but 0x60, then reads back immediately to check bit 0 and repeats if it is set.)
* Reads 0x3ff20c20 and checks for zero
* Reads status bits from 0x3ff20c24. Bits 26 & 27 are set by [[WDev_MacTimArm (IoT RTOS SDK 0.9.9)|WDev_MacTimArm]] or [[WDev MacTim1Arm (IoT RTOS SDK 0.9.9)|WDev MacTim1Arm]], as applicable. Other bits are also checked (3 & 4, maybe others). Depending on which bits are set it calls static handler routines, etc.

At various points the routine may panic, print "wdev.c -line number-" and abort in an infinite loop.

Handler may also call into:
* lmacProcessRtsStart
* lmacProcessTXStartData
* lmacProcessCollisions
* lmacIsActive
* lldesc_num2link
* lmacProcessAckTimeout
* lmacProcessTxSuccess
* lmacProcessTxRtsError
* lmacProcessCtsTimeout
* lmacProcessTxError

==Guess at what's happening==

[[Watchdog Timer]] describes this handler as on a timer, so I think this is the timeout handler triggering retransmission after a collision or following an RTS request...

It's possible that all transmissions get pushed into this code path via the NMI.

=See Also=

* [[wDev_MacTimSetFunc (IoT RTOS SDK 0.9.9)|wDev_MacTimSetFunc]]
* [[wDev_MacTimArm (IoT RTOS SDK 0.9.9)|wDev_MacTimArm]]
* [[wDev_MacTim1Arm (IoT RTOS SDK 0.9.9)|wDev_MacTim1Arm]]
