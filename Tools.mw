= Toolchain / Development Environment =

=== [https://github.com/pfalcon/esp-open-sdk esp-open-sdk] ===

The current de-facto standard for low-level ESP8266 development is esp-open-sdk, which can automatically build a full development environment and toolchain, including all the necessary GNU cross-compiling tools needed by most other utilities.

= Disassemblers / Inspection Tools =

=== [https://github.com/radare/radare2 radare2] ===

radare2 is a cross-platform unix-like reverse engineering framework with a commandline tool suite.

radare2 has recently added xtensa support, allowing it to draw jump/branch lines next to the disassembled code.

=== [https://github.com/pfalcon/ScratchABit ScratchABit] ===

ScratchABit is an interactive incremental disassembler with data/control flow analysis capabilities.

ScratchABit is intended to be cross-platform, and uses a simple text (vt100/xterm) interface to inspect and follow code interactively.

=== [https://bitbucket.org/foogod/xtobjdis xtobjdis] ===

Xtobjdis is an ELF object file disassembler for the Xtensa ISA.  It is intended primarily for disassembling object (.o) files, such as those contained in the IoT SDK libraries, fully exploiting all symbol, relocation, and compiler annotation information provided (though non-ELF binaries can be converted to work with it as well, with somewhat less information available).

Xtobjdis also provides tools for generating function call graphs from the disassembly as well.

= Miscellaneous =

=== [https://bitbucket.org/foogod/esp8266-re-tools Foogod's ESP8266-RE Tools] ===

A collection of miscellaneous scripts/tools (mostly based on xtobjdis) which have been useful for some of the reverse engineering efforts to date.
