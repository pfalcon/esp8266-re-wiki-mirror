This page details the structure of the data contained and read from the SPI ROM chip.

= Overall Structure =

The structure of the SPI flash is broken up into three sections:

{| class="wikitable"
! Location !! Size !! Function
|-
| 0 || flash_size/2 || image 0
|-
| flash_size/2 || flash_size/2 - 16 KB || image 1
|-
| flash_size - 16 KB || 16 KB || Internal data
|}

'''image 0''' and '''image 1''' are two independently bootable firmware images.  The last four 4KB sectors are reserved for use internally by the bootloader.

(Which of the images the loader boots is determined by a flag stored in the '''internal data''' area)

= Firmware Image Format =

The format of the firmware image data contained in the two image sections can be in one of two forms:

* Boot mode 1 (older format):
:{| class="wikitable"
| 0xe9 Header
|-
| Loadable segments
|-
| Checksum
|-
| Padding
|-
| .irom0.text data
|}

* Boot mode 2 (newer format):
:{| class="wikitable"
| 0xea Header
|-
| .irom0.text segment
|-
| 0xe9 Header
|-
| Loadable segments
|-
| Checksum
|}

== 0xe9 Header ==

In "boot mode 1" images, this is the first header in the image.  For "boot mode 2", it comes immediately after the 0xea header and the irom0.text segment.

{| class="wikitable"
! Offset !! Size !! Datatype !! Name !! Value / Notes
|-
| 0 || 1 || uint8 || magic || 0xe9
|-
| 1 || 1 || uint8 || unknown || 3
|-
| 2 || 1 || uint8 || flash_mode || 
|-
| 3 || 1 || uint8 || flash_size_speed ||
|-
| 4 || 4 || uint32 || entry_addr ||
|}

* ''flash_mode'' is one of the following values:
::{| class="wikitable"
!Value || Meaning
|-
| 0 || QIO
|-
| 1 || QOUT
|-
| 2 || DIO
|-
| 3 || DOUT
|}
* ''flash_size_speed'' is a combination of the following:
** High nybble (0xf0) -- flash size:
:::{| class="wikitable"
!Value || Meaning
|-
| 0 || 512 KB (4 Mbit)
|-
| 1 || 256 KB (2 Mbit)
|-
| 2 || 1024 KB (8 Mbit)
|-
| 3 || 2048 KB (16 Mbit)
|-
| 4 || 4096 KB (32 Mbit)
|}
** Low nybble (0x0f) -- flash speed:
:::{| class="wikitable"
!Value || Meaning
|-
| 0 || 40 MHz
|-
| 1 || 26 MHz (80 MHz / 3)
|-
| 2 || 20 MHz
|-
| 0xf || 80 MHz
|}
* ''entry_addr'' is the memory location to start execution once all of the loadable segments are loaded.

== Loadable Segments ==

Immediately following the 0xe9 header are one or more code/data segments.  Each segment starts with the following 8-byte header, followed immediately by the segment data:

{| class="wikitable"
! Offset !! Size !! Datatype !! Name
|-
| 0 || 4 || uint32 || address
|-
| 4 || 4 || uint32 || length
|}

For each of these segments, the bootloader will load the data into the memory at ''address'', before finally calling the ''entry_addr'' address to begin execution of the image.

== Checksum ==

Following the last loadable segment, zero to 15 padding bytes will be added, followed by a checksum byte.

The number of padding bytes is calculated such that the end of the data always falls on a 16-byte boundary (that is, the checksum byte will always be on a 16-byte boundary minus one).

The checksum is a simple XOR of all of the data from each of the segments (the segment headers are ''not'' included), also XOR'd with the magic value 0xef.

== Padding ==

In boot mode 1, the .irom0.text data always starts at offset 0x10000.  The space between the checksum and offset 0x10000 is filled with 0xff bytes.

== .irom0.text data (boot mode 1) ==

In boot mode 1, starting at offset 0x10000 in the image, is the contents of the .irom0.text segment data.  (There is no initial header preceeding this data, and no checksum)

== 0xea Header ==

This header is only present for "boot mode 2" images (produced with newer versions of the SDK).  If present, it occurs at the very beginning of the image. (boot mode 1 images simply start with the 0xe9 header instead)

{| class="wikitable"
! Offset !! Size !! Datatype !! Name !! Value / Notes
|-
| 0 || 1 || uint8 || magic || 0xea
|-
| 1 || 1 || uint8 || unknown || 4
|-
| 2 || 1 || uint8 || flash_mode || 
|-
| 3 || 1 || uint8 || flash_size_speed ||
|-
| 4 || 4 || uint32 || entry_addr ||
|}

* Note: ''flash_mode'', ''flash_size_speed'', and ''entry_addr'' are all the same as in the 0xe9 header.

== .irom0.text segment (boot mode 2) ==

Immediately following the 0xea header is a segment header:

{| class="wikitable"
! Offset !! Size !! Datatype !! Name
|-
| 0 || 4 || uint32 || address
|-
| 4 || 4 || uint32 || length
|}

This header is immediately followed by ''length'' bytes of .irom0.text data

(''address'' appears to be unused in this context, as the .irom0.text segment is not loaded into memory like the other segments)

= Internal Data =

The last four 4K sectors of the SPI flash are reserved for internal use by the bootloader:

{| class="wikitable"
! Offset !! Purpose
|-
| 0 || (unidentified data)
|-
| 4 KB || interface config data for image 0
|-
| 8 KB || interface config data for image 1
|-
| 12 KB || internal master config
|}

== Interface config data ==

Size: 0x370 (880) bytes

This data is copied into a portion of [[g_ic]] on boot.  Exact contents/layout still to be determined.

== Internal master config data ==

{| class="wikitable"
! Offset !! Size !! Datatype !! Name !! Value / Notes
|-
| 0 || 1 || uint8 || boot_image_num || which of the two ROM images to boot (0 or 1)
|-
| 1 || 3 || || (unused?) ||
|-
| 4 || 4 || uint32 || checksum_magic || 0x55aa55aa = perform checksum, 0xffffffff = no checksum
|-
| 8 || 4 || || (unknown) ||
|-
| 12 || 4 || uint32 || image0_icdata_len || length of image0 config data to be checksummed
|-
| 16 || 4 || uint32 || image1_icdata_len || length of image1 config data to be checksummed
|-
| 20 || 4 || uint32 || image0_icdata_checksum || image0 config data checksum value
|-
| 24 || 4 || uint32 || image1_icdata_checksum || image1 config data checksum value
|}

* The checksum value in ''image0_icdata_checksum''/''image1_icdata_checksum'' is calculated the same way as for the segment data (XOR of all data with 0xef).

= Sources =
* gen_appbin.py
* http://richard.burtons.org/2015/05/17/esp8266-boot-process/
* http://richard.burtons.org/2015/05/17/decompiling-the-esp8266-boot-loader-v1-3b3/
